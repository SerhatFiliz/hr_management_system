----------------------30.06.2025-----------------------------------------------------------------
The project has started.
The technologies to be used in the project have been installed and synchronized.
The database has been installed and connected.
The ER diagram has been drawn
The Core App has been opened => The 'core' app holds the project's foundational models, like Company and Employee. It's a starting point for central logic before we create more specialized apps for things like job postings or candidates.
The GitHub repository has been opened and the first push has been made
A readme file was written for the project.

----------------------01.07.2025----------------------------------------------------------------------
Two neew application added: accounts and portal.("accounts" for user transactions and "portal" for portal transactions)
I've refactored my Django database connection by moving sensitive credentials from settings.py to a secure .env file, ensuring best practices for security and environment-specific configurations.
.gitignore and .env files created.
settings.py file configured. dotenv installed.
Data models were created using Django's ORM (models.py). ****
Created superuser and saved Company, Employee, JobPosting, Candidate and Application Models to admin panel (admin.py).

----------------------02.07.2025----------------------------------------------------------------------
The core application folder was deleted to simplify the project structure.
Necessary MEDIA_ROOT and MEDIA_URL settings for Django's media file management (like resumes) were configured in settings.py and the main urls.py files.
accounts/urls.py and portal/urls.py files were created to house the URL structures for each application, and these were included in the main urls.py.
UserRegistrationForm was created in accounts/forms.py for HR employee registration. This form extends Django's UserCreationForm and includes the company_name field.
The clean_company_name and save methods of UserRegistrationForm were updated to meet the project requirement (create company if it doesn't exist, link to existing if it does) and ensure data integrity with atomic transactions.
The register_hr_employee view function was written in accounts/views.py to handle the registration process. This view processes the form, saves the user, automatically logs them in, and redirects them to the Admin panel.(temporarily)
The accounts/templates/accounts/register.html HTML template was created for the registration form, preparing its visual interface.
The main URL (/) was updated in hr_management_system/urls.py to redirect directly to the registration page (/accounts/register/).
The registration functionality was successfully tested; a new HR employee record was created, automatic login was performed, and the redirection to the Admin panel (temporarily) occurred as expected.

----------------------03.07.2025----------------------------------------------------------------------
Login/Logout Functionality Implemented: Django's built-in LoginView and LogoutView were configured in accounts/urls.py to handle user authentication securely.
Login Page Created: A user-facing login template (accounts/login.html) was created to allow users to enter their credentials.
Protected Dashboard View Created: A class-based DashboardView was developed in portal/views.py, using LoginRequiredMixin to ensure that only authenticated users can access it.
Global Redirects Configured: LOGIN_REDIRECT_URL and LOGIN_URL were set in settings.py to manage the application's redirect logic after login and for protected page access.
Dashboard UI Developed: A portal/dashboard.html template was created to serve as the main landing page for users after they log in, displaying a welcome message and company information.
Structural Bug Fixed (AttributeError): Resolved a critical AttributeError that occurred because the DashboardView was incorrectly trying to access user.userprofile. The code was refactored to use the correct relationship (user.employee.company) as defined in the ER diagram.
Admin Configuration Corrected (AlreadyRegistered): Resolved a django.contrib.admin.exceptions.AlreadyRegistered error by refactoring accounts/admin.py and portal/admin.py to ensure each model is registered only once in its appropriate application.
End-to-End Authentication Flow Tested: The complete user journey (visiting a protected page -> redirect to login -> successful login -> redirect to dashboard -> logout) was successfully tested and confirmed to be fully functional.

----------------------04.07.2025----------------------------------------------------------------------
New Feature Development Started: A separate development branch was created to work on the new job posting feature in an organized manner.
Job Posting Creation Enabled: Functionality was implemented allowing users to create new job postings via a dedicated form.
Dashboard Enhanced with Job Listings: The main dashboard was updated to display a list of all job postings associated with the logged-in user's company.
Editing and Deletion Functionality Added: Users were given the ability to securely edit and delete their existing job postings, including a confirmation step for deletions.
User Interface Pages Created: All necessary web pages and links for creating, viewing, editing, and deleting job postings were structured and implemented.
Job Posting Management Cycle Completed: The full management cycle for job postings (Create, Read, Update, and Delete) was successfully developed and tested, marking the completion of a major project modul.

----------------------07.07.2025----------------------------------------------------------------------
New Feature Development Started: A new Git branch (feature/candidate-management) was created to begin work on the candidate management module.
File Upload System Configured: The project's settings (settings.py) and main URL configuration were updated to handle media file uploads, specifically for candidate resumes.
Candidate Creation Enabled: A new form and a corresponding view were developed, allowing HR employees to add new candidates to the system, including their name, email, and a PDF resume.
Candidate Listing Implemented: The main dashboard was enhanced to display a list of all candidates associated with the user's company.
Resume Access Enabled: The candidate list on the dashboard now includes a direct link to view or download each candidate's uploaded resume.
Candidate Management Cycle (Create/Read) Completed: The initial phase of the candidate module, allowing users to add and view candidates, was successfully completed and tested.

----------------------08.07.2025----------------------------------------------------------------------
AI Feature Development Initiated: The optional AI-powered job title generation feature was started by creating a dedicated Git branch for its development.
Backend API Endpoint Created: A new backend service was developed in Django. This service's sole purpose is to receive requests from the user's browser and communicate with the external Hugging Face AI API.
Interactive Frontend Implemented: The "Job Posting Editor" page was updated with a "Suggest Title with AI" button and the necessary JavaScript code to send the job description to our new backend service.
API Configuration and Security: API credentials and URLs were securely configured using the .env file, ensuring no sensitive information is stored directly in the source code.
Extensive API Debugging: A series of API connection and response errors (including 401 Unauthorized, 404 Not Found, and 500 Internal Server Error) were diagnosed and resolved to establish a stable connection with the AI service.
Iterative Refinement of AI Logic: The code for sending requests and parsing the AI's response was refined multiple times to better handle errors and improve the quality of the generated title.

----------------------09.07.2025----------------------------------------------------------------------
Frontend Overhaul and UI Standardization: A unified site-wide structure was established by creating a single base.html master template. All existing pages were then refactored to extend this base and utilize the Bootstrap 5 framework, resulting in a modern, responsive, and visually consistent user interface.
Job-Candidate Relationship Established: The core logic of the application was implemented by creating the Application system. This included developing a dedicated detail page for each job posting, which now correctly lists only the candidates who have applied for that specific job.
Application & Candidate Management Features Completed: Functionality was added to allow HR employees to associate candidates with jobs, update the status of applications (e.g., 'Reviewed'), and the full CRUD cycle for candidates was completed by making the "Edit" and "Delete" buttons operational.
AI Response Logic Refined: To fix the issue of the AI returning long summary sentences, the backend logic was updated to process the API's response, split it into individual sentences, and use only the first sentence as the final suggested job title.
Critical Security Vulnerability Patched: A major security vulnerability was identified and fixed. All data management views were secured with LoginRequiredMixin to ensure that unauthenticated users can no longer access them by directly entering a URL.


----------------------10.07.2025----------------------------------------------------------------------
Unit Tests Created: The project's test suite was finalized by adding comprehensive tests for the user registration logic in the accounts app and for all core functionalities (CRUD, security, file validation) in the portal app.
'Created By' Info Added to Dashboard: The dashboard was updated to display the username of the employee who created each job posting, fulfilling a project requirement.
Candidate Deletion Feature Added: The full CRUD (Create, Read, Update, Delete) cycle for candidate management was completed by implementing the functionality for users to delete candidate profiles.
README Updated: A comprehensive README.md file was created, detailing the project's features, technology stack, and step-by-step setup instructions for new developers.
Requirements Updated: The requirements.txt file was generated to lock down all project dependencies and their specific versions, ensuring a reproducible environment.

-------------------11.07.2025-------------------------------------------------------------------------
Last changes and final release.
Control and test.

----------------14.07.2025---------------------------------------------------------------------------
Logout Error (Critical): Fixed HTTP 405 error by converting the logout link to a POST request form.
Registration Error (Critical): Resolved silent form validation failures by integrating django-crispy-forms to display errors.
UI Enhancements: Restyled navbar buttons using Bootstrap for a better user experience.
Background Task Infrastructure (Celery & Redis) Setup:
Successfully integrated Celery and Redis to enable asynchronous background tasks.
Configured the project (settings.py, celery.py) and created an initial test task.
Verified the complete setup by successfully running a test task via the Django shell.
hr_management_system/settings.py 
hr_management_system/celery.py
hr_management_system/__init__.py
portal/tasks.py

----------------16.07.2025---------------------------------------------------------------------------
Forms Refactored with Crispy Forms: All forms in both accounts and portal apps were updated to use django-crispy-forms for consistent Bootstrap styling and improved maintainability.
Templates Simplified: All form templates (register.html, login.html, job_posting_editor.html, etc.) were simplified by replacing manual HTML with the {{ form|crispy }} filter, resulting in cleaner and more readable code.
Automatic Status Logic Implemented: The JobPosting model's save() method was overridden to automatically manage the is_active status based on the closing_date, removing the need for manual user input.
Periodic Task (Celery Beat) Configured: A scheduled task was created using CELERY_BEAT_SCHEDULE to automatically run a function (deactivate_expired_postings) at regular intervals.
Celery Beat System Verified: The full Celery Beat and Worker pipeline was successfully tested. It was confirmed that the scheduler automatically triggers the task and the worker executes it, correctly updating the status of expired job postings in the database.

-------------17.07.2025-----------------------------------------------------------------------------
New Branch: Created feature/advanced-cv-parsing to start the new module.
New Dependency: Installed PyPDF2 for PDF text extraction.
UI Created: Developed bulk_cv_upload.html for multiple file uploads.
Backend Implemented: Created BulkCVUploadView and its URL to receive files.
Celery Task Created: Developed a new background task, process_single_cv, to handle individual file processing.
Asynchronous Flow Verified: Confirmed that the view successfully delegates uploaded files to the Celery task, which then extracts the text from the PDFs in the background.

--------------18.07.2025-------------------------------------------------------------------------------
Initial AI Implementation (Hugging Face): First attempt at the AI feature was made using various models from the Hugging Face free API tier.
Robust Fallback System Developed: Due to persistent 404 Not Found errors and instability with the Hugging Face API, a robust fallback system using Regular Expressions (RegEx) was developed within the Celery task to parse candidate details directly from the CV text.
Strategic API Shift: To meet the project's core "AI-powered" requirement reliably, switched from the unstable Hugging Face free tier to the permanently free and stable Google Gemini API.
New Dependency: Installed the google-generativeai library to interact with the new API.
Environment Configuration: Updated the .env file, replacing Hugging Face credentials with the new GOOGLE_API_KEY.
Celery Task Created for Google Gemini: The process_single_cv background task in portal/tasks.py was implemented to integrate directly with the Google Gemini API.
Successful End-to-End Test: The entire CV processing pipeline was successfully verified